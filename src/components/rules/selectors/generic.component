<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-rules-selectors-generic">
  <template>
    <can-import from="semantic-ui-dropdown-canjs"/>
    <h3 class="option-title">Choose <span class="option-property">{{property}}</span></h3>
    <div class="dropdown-wrapper">
      <div class="ui selection dropdown" semantic-dropdown>
        <input type="hidden" {($value)}="selected">
        <i class="dropdown icon"></i>
        <div class="default text">{{options.0.0}}</div>
        <div class="menu">
          {{#unless selected}}
            <div class="item" data-value="">&nbsp;</div>
          {{/unless}}
          {{#each options}}
            <div class="item" data-value="{{1}}">{{0}}</div>
          {{/each}}
        </div>
      </div>
    </div>
  </template>
  <script type="view-model">
    import $ from 'jquery';
    import canMap from 'can-map';
    import 'can-map-define';
    import Rule from 'i2web/models/rule';

    export default canMap.extend({
      define: {
       /**
        * @property {Map} chosen
        * @parent i2web/components/rules/selectors/generic
        * @description The key value pairs chosen by the User to satisfy this particular rule
        */
        chosen: {
          Type: canMap,
        },
        /**
         * @property {Map} options
         * @parent i2web/components/rules/selectors/generic
         * @description The raw options available to the User, used to retrieve the list of Devices
         */
        options: {
          Type: canMap,
        },
        /**
         * @property {String} property
         * @parent i2web/components/rules/selectors/generic
         * @description The property name from the template to match up against the Rule context
         */
        property: {
          type: 'string',
        },
        /**
         * @property {Rule} rule
         * @parent i2web/components/rules/selectors/generic
         * @description The Rule that we are editing. This will be null, if we are creating a
         * new Rule.
         */
        rule: {
          Type: Rule,
        },
        /**
         * @property {String} selected
         * @parent i2web/components/rules/selectors/generic
         * @description
         */
        selected: {
          set(selected) {
            const ruleValue = this.attr(`rule.rule:context.${this.attr('property')}`);
            // Only set it if its truthy and it is a new value (not in the rule already)
            if (selected && selected !== ruleValue) {
              this.attr(`chosen.${this.attr('property')}`, selected);
              this.attr('options').each((opt) => {
                if (opt[1] === selected) {
                  $(`button[id="${this.attr('property')}"]`).text(`${opt[0]}`);
                }
              });
            }
            return selected;
          },
        },
      },
      init() {
        const chosenProperty = this.attr(`chosen.${this.attr('property')}`);
        if (this.attr('rule') && !chosenProperty) {
          this.attr('options').each((opt) => {
            if (opt[1] === this.attr(`rule.rule:context.${this.attr('property')}`)) {
              this.attr('selected', opt[1]);
            }
          });
        }
        if (chosenProperty) {
          this.attr('selected', chosenProperty);
        }
      },
    });
  </script>
</can-component>