<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-configurator-water-flow">
  <template>
    <h4>Water Flow</h4>
    <hr />
    <div class="configurator-wrapper">
      <h5>Continuous Water Flow</h5>
      <p>Choose the flow rate that will trigger a push notification and an email when the flow rate has been reached for 20 minutes.</p>
        {{#selectInput('flowRate', 'Choose Flow Rate', id="select-flow-rate")}}
          <option value="OFF">OFF - Disable Push Notification and Email</option>
          <option value="LOW">LOW (0.3 GPM or more) - Faucet trickling</option>
          <option value="MEDIUM">MEDIUM (2.0 GPM or more) - Faucet left running</option>
          <option value="HIGH">HIGH (8.0 GPM or more) - Several faucets left running or a burst pipe.</option>
        {{/selectInput}}
      <hr />
      <h5>Excessive Water Flow</h5>
      <div class="water-flow-container">
        <p>
          This device learns your average daily water usage. If the amount of water used in a particular day is significantly more than the average for that day of the week, send a high water use push notification and email to <strong>{{accountOwner}}</strong>.
        </p>
        <arcus-control-switch {is-on}="alertOnExcessiveUse" {toggle}="@toggleExcessiveUseAlert" />
      </div>
    </div>
    <hr />
  </template>
  <script type="view-model">
    import AppState from 'i2web/plugins/get-app-state';
    import canMap from 'can-map';
    import 'can-map-define';
    import Device from 'i2web/models/device';
    import Errors from 'i2web/plugins/errors';
    import Person from 'i2web/models/person';

    const FLOW_RATES = {
      OFF: 0.0,
      LOW: 0.3,
      MEDIUM: 2.0,
      HIGH: 8.0,
    };

    export default canMap.extend({
      define: {
        account: {
          get() {
            return AppState().attr('account');
          },
        },
        accountOwner: {
          get(lastVal, setAttr) {
            const ownerId = `SERV:person:${this.attr('account.account:owner')}`;
            Person.get({ 'base:address': ownerId }).then((person) => {
              if (person.attr('person:name')) {
                setAttr(person.attr('person:name'));
              } else {
                setAttr('the account owner');
              }
            }).catch((e) => {
              setAttr('the account owner');
              Errors.log(e);
            });
          },
        },
        alertOnExcessiveUse: {
          get() {
            return this.attr('device.ecowater:alertOnExcessiveUse');
          },
        },
        device: {
          Type: Device,
        },
        flowRate: {
          get() {
            const flowRateValue = isFinite(this.attr('device.ecowater:continuousRate')) ? this.attr('device.ecowater:continuousRate') : 0.0;
            if (flowRateValue >= 8.0) {
              return 'HIGH';
            } else if (flowRateValue >= 2.0) {
              return 'MEDIUM';
            } else if (flowRateValue >= 0.3) {
              return 'LOW';
            }
            return 'OFF';
          },
          set(flowRateKey) {
            const flowRate = FLOW_RATES[flowRateKey];
            const doAlert = flowRate > 0;
            const device = this.attr('device');
            device.attr('ecowater:alertOnContinuousUse', doAlert);
            device.attr('ecowater:continuousRate', flowRate);
            return flowRateKey;
          },
        },
      },
      toggleExcessiveUseAlert(context, el, ev) {
        if (ev) ev.stopImmediatePropagation();
        const device = this.attr('device');
        const newValue = !this.attr('alertOnExcessiveUse');
        device.attr('ecowater:alertOnExcessiveUse', newValue);
        device.save()
          .catch(e => Errors.log(e, true));
      },
    });
  </script>
  <script type="events">
    export default {
      '{viewModel.device} ecowater:continuousRate': function valueUpdated() {
        this.viewModel.attr('device').save().catch();
      },
    };
  </script>
</can-component>