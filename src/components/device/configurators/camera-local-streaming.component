<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-configurator-camera-local-streaming">
  <template>
    <div class="configurator-header">
      <h4 class="config-title">Local Streaming</h4>
    </div>
    <p>Use the camera information below to live stream using 3rd party applications.</p>
    <hr />
    <h4>Camera Username<br/>
      <small>{{username}}</small></h4>
    <h4>Camera Password<br/>
      <small>{{password}}</small></h4>
    <h4>IP Address<br/>
      <small>{{ip}}</small></h4>
    <h4>Streaming Path<br/>
      <small>/img/video.sav</small></h4>
    <hr />
    <small>Please ensure that your network is secure to prevent access to your camera by people outside of your home.
      Arcus cannot control your local network security settings.</small>
  </template>
  <script type="view-model">
    import canMap from 'can-map';
    import 'can-map-define';
    import Device from 'i2web/models/device';
    import Errors from 'i2web/plugins/errors';
    import getAppState from 'i2web/plugins/get-app-state';

    export default canMap.extend({
      define: {
        device: {
          Type: Device,
        },
        hub: {
          get() {
            return getAppState().attr('hub');
          },
        },
        username: {
          get() {
            return this.attr('hub.base:id') || undefined;
          },
        },
        password: {
          get(currentVal, setVal) {
            const hub = this.attr('hub');
            if (hub) {
              hub.getCameraPassword().then(({ password }) => {
                const passwordLength = password ? password.length : 0;
                if (passwordLength > 8) {
                  setVal(password.substring(0, 8));
                } else {
                  setVal(password);
                }
              }).catch((e) => {
                setVal(undefined);
                Errors.log(e, true);
              });
            }
            return undefined;
          },
        },
        ip: {
          get() {
            return this.attr('device.ipinfo:ip') || '';
          },
        },
      },
      title: 'Local Streaming',
    });
  </script>
</can-component>