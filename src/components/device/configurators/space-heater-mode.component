<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-configurator-space-heater-mode">
  <template>
    <can-import from="i2web/components/selectors/generic.component" />
    <div class="configurator-header">
      <h4 class="config-title" id="configuration-title-orientation">Choose A State</h4>
    </div>
    <div>
      <arcus-generic-selector {things}="states" {is-selected}="@isRightState" {select-option}="@stateChanged" />
    </div>
    {{#if isTwinStar}}
      <div class="configurator-header">
        <h4 class="config-title" id="configuration-title-orientation">Choose A Mode</h4>
      </div>
      <div>
        <arcus-generic-selector {things}="modes" {is-selected}="@isRightMode" {select-option}="@modeChanged" />
      </div>
    {{/if}}
  </template>
  <script type="view-model">
    import canList from 'can-list';
    import canMap from 'can-map';
    import 'can-map-define';
    import Errors from 'i2web/plugins/errors';
    import SpaceHeaterCapability from 'i2web/models/capability/SpaceHeater';
    import TwinStarCapability from 'i2web/models/capability/TwinStar';
    import Device from 'i2web/models/device';

    export default canMap.extend({
      define: {
        device: {
          Type: Device,
        },
        states: {
          value() {
            return new canList([{
              name: 'Off',
              value: SpaceHeaterCapability.HEATSTATE_OFF,
            }, {
              name: 'On',
              value: SpaceHeaterCapability.HEATSTATE_ON,
            }]);
          },
        },
        modes: {
          value() {
            return new canList([{
              name: 'Standard',
              value: TwinStarCapability.ECOMODE_DISABLED,
            }, {
              name: 'EcoMode',
              value: TwinStarCapability.ECOMODE_ENABLED,
            }]);
          },
        },
        isTwinStar: {
          get() {
            return this.attr('device').hasCapability('twinstar');
          },
        },
      },
      SpaceHeaterCapability,
      TwinStarCapability,
      stateChanged(state) {
        const device = this.attr('device');
        device.attr('spaceheater:heatstate', state.value);
        device.save()
          .catch(e => Errors.log(e, true));
      },
      isRightState(state) {
        const device = this.attr('device');
        return device.attr('spaceheater:heatstate') === state.value;
      },
      modeChanged(mode) {
        const device = this.attr('device');
        device.attr('twinstar:ecomode', mode.value);
        device.save()
          .catch(e => Errors.log(e, true));
      },
      isRightMode(mode) {
        const device = this.attr('device');
        return device.attr('twinstar:ecomode') === mode.value;
      },
    });
  </script>
</can-component>