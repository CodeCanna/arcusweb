<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-configurator-contact-setting">
  <template>
    <can-import from="i2web/components/selectors/generic.component" />
    {{#unless device.hasCapability('tilt')}}
    <div class="configurator-header">
      <h4 class="config-title" id="configuration-title-contact-setting">Choose Installation Location</h4>
    </div>
    <div>
      <arcus-generic-selector {things}="things" {is-selected}="@isSelected" {select-option}="@selectThing" />
    </div>
    {{/unless}}
  </template>
  <script type="view-model">
    import canMap from 'can-map';
    import canList from 'can-list';
    import 'can-map-define';
    import Errors from 'i2web/plugins/errors';
    import Device from 'i2web/models/device';
    import ContactCapability from 'i2web/models/capability/Contact';

    export default canMap.extend({
      define: {
        device: {
          Type: Device,
        },
        things: {
          Type: canList,
          value() {
            const things = new canList([{
              name: 'Door',
              value: ContactCapability.USEHINT_DOOR,
            }, {
              name: 'Window',
              value: ContactCapability.USEHINT_WINDOW,
            }, {
              name: 'Other',
              value: ContactCapability.USEHINT_OTHER,
            }]);

            return things;
          },
        },
      },

      isSelected(thing) {
        return this.attr('device.cont:usehint') === thing.value;
      },

      selectThing(thing) {
        const device = this.attr('device');

        device.attr('cont:usehint', thing.value);

        device.save()
          .catch(e => Errors.log(e, true));
      },
    });
  </script>
</can-component>