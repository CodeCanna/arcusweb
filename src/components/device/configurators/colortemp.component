<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-configurator-colortemp">
  <template>
    <div class="configurator-header">
      <h4 class="config-title" id="configuration-title-colortemp">
        Temperature
      </h4>
      <span class="config-value">
        {{device['colortemp:colortemp']}}
        <span class="value-unit">K</span>
      </span>
    </div>
    <div class="range-wrapper temp-control">
      {{#isIE}}
      <input type="range"
        {{#unless isColorTempMode}}disabled{{/unless}}
        {$value}="device['colortemp:colortemp']"
        ($change)="tempuratureChanged(%event)"
        min="{{device['colortemp:mincolortemp']}}"
        max="{{device['colortemp:maxcolortemp']}}"
        step="1"
        aria-valuenow="{{device['colortemp:colortemp']}}"
        aria-valuemin="{{device['colortemp:mincolortemp']}}"
        aria-valuemax="{{device['colortemp:maxcolortemp']}}">
      {{else}}
      <input type="range"
        {{#unless isColorTempMode}}disabled{{/unless}}
        {$value}="device['colortemp:colortemp']"
        ($input)="tempuratureChanged(%event)"
        min="{{device['colortemp:mincolortemp']}}"
        max="{{device['colortemp:maxcolortemp']}}"
        step="1"
        aria-valuenow="{{device['colortemp:colortemp']}}"
        aria-valuemin="{{device['colortemp:mincolortemp']}}"
        aria-valuemax="{{device['colortemp:maxcolortemp']}}">
      {{/isIE}}
      <label>{{device['colortemp:description']}}</label>
    </div>
  </template>
  <script type="view-model">
    import canMap from 'can-map';
    import 'can-map-define';
    import Device from 'i2web/models/device';
    import LightCapability from 'i2web/models/capability/Light';
    import Errors from 'i2web/plugins/errors';

    export default canMap.extend({
      define: {
        device: {
          Type: Device,
        },
        isColorTempMode: {
          get() {
            return this.attr('device.light:colormode') === LightCapability.COLORMODE_COLORTEMP;
          },
        },
        saveTimeoutId: {},
      },
      LightCapability,
      tempuratureChanged(event) {
        this.attr('device.colortemp:colortemp', +event.target.value);

        const clearTimeoutId = this.attr('saveTimeoutId');
        this.attr('saveTimeoutId', setTimeout(() => {
          this.attr('device').save().then(() => {
            this.removeAttr('saveTimeoutId');
          }).catch((e) => {
            this.removeAttr('saveTimeoutId');
            Errors.log(e, true);
          });
        }, 50));
        clearTimeout(clearTimeoutId);
      },
    });
  </script>
</can-component>