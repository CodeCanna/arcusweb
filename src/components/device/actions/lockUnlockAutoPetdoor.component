<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-device-action-lock-unlock-auto-petdoor">
  <template>
    <div class="content">
      <button class="btn-run" ($click)="toggleLockState(false, , %event, %element)" >
        {{lockUnlockState}}
      </button>
      {{#if showAutoButton}}
      <button class="btn-run" ($click)="toggleLockState('auto', %event, %element)">
        {{unlockAutoState}}
      </button>
      {{else}}
      <button class="btn-run" ($click)="toggleLockState(false, %event, %element)">
        Unlock
      </button>
      {{/if}}
    </div>
  </template>
  <script type="view-model">
    import canMap from 'can-map';
    import 'can-map-define';
    import Errors from 'i2web/plugins/errors';
    import Device from 'i2web/models/device';
    import PetDoorCapability from 'i2web/models/capability/PetDoor';

    export default canMap.extend({
      define: {
        device: {
          Type: Device,
        },
        lockUnlockState: {
          get() {
            const lockState = this.attr('device.petdoor:lockstate');

            switch (lockState) {
              case PetDoorCapability.LOCKSTATE_LOCKED:
                return 'Unlock';
              case PetDoorCapability.LOCKSTATE_UNLOCKED:
                return 'Lock';
              case PetDoorCapability.LOCKSTATE_AUTO:
                return 'Lock';
              default:
                return 'Lock';
            }
          },
        },
        unlockAutoState: {
          get() {
            const lockState = this.attr('device.petdoor:lockstate');

            switch (lockState) {
              case PetDoorCapability.LOCKSTATE_LOCKED:
                return 'Auto';
              case PetDoorCapability.LOCKSTATE_UNLOCKED:
                return 'Auto';
              case PetDoorCapability.LOCKSTATE_AUTO:
                return 'Unlock';
              default:
                return 'Auto';
            }
          },
        },
        isLocked: {
          type: 'boolean',
          get() {
            const lockState = this.attr('device.petdoor:lockstate');
            return lockState === PetDoorCapability.LOCKSTATE_LOCKED;
          },
        },
        showAutoButton: {
          type: 'boolean',
          get() {
            const lockState = this.attr('device.petdoor:lockstate');
            return lockState !== PetDoorCapability.LOCKSTATE_AUTO;
          },
        },
      },
      /**
       * @function toggleLockState
       * @description Toggle the state of the lock between locked and unlocked.
       */
      toggleLockState(nextState, ev, el) {
        ev.stopPropagation();
        const device = this.attr('device');
        const isLocked = this.attr('isLocked');
        let newLockState = isLocked ? PetDoorCapability.LOCKSTATE_UNLOCKED : PetDoorCapability.LOCKSTATE_LOCKED;

        if (nextState === 'auto') {
          newLockState = PetDoorCapability.LOCKSTATE_AUTO;
        }
        device.attr('petdoor:lockstate', newLockState).save().then(() => {
          el.classList.remove('hover');
        }).catch(e => Errors.log(e));
      },
    });
  </script>
</can-component>