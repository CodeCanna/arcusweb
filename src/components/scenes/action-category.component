<!--
Copyright 2019 Arcus Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<can-component tag="arcus-scenes-action-category">
  <template>
    <div class="scene-category" ($click)="expandAndEdit(action, %element)">
      <div class="row">
        <i class="{{actionIcon(action)}} category-icon"></i>
        <p class="category-name">{{action["name"]}}</p>
        <i class="icon-app-chevron chevron-btn">
          <span class="sr-only">Add/Edit Devices</span>
        </i>
      </div>
      <ul class="active-devices">
        {{#each activeDevices(action)}}
        <li>{{name}}</li>
        {{/each}}
      </ul>
    </div>
  </template>
  <script type="view-model">
    import _ from 'lodash';
    import canMap from 'can-map';
    import 'can-map-define';
    import AppState from 'i2web/plugins/get-app-state';

    export default canMap.extend({
      define: {
        /**
         * @property {canMap} action
         * @parent i2web/components/scenes/action-category
         * @description A satisfiable action category
         */
        action: {
          Type: canMap,
          set(action) {
            return action;
          },
        },
      },
      /**
       * @function activeDevices
       *
       * Return the list of devices that are active for a particular action category
       * @param {canMap} action
       * @return {Array<Device>}
       */
      activeDevices(action) {
        // To differentiate between new (scene will be undefined) and existing scene
        // (scene will be defined)
        if (!this.attr('scene')) { return []; }

        const configuredActions = this.attr('scene.scene:actions');
        if (!configuredActions.length) { return []; }

        const found = _.find(configuredActions, a => action.id === a.template);
        if (!found) { return []; }

        const deviceAddresses = _.keys(found.context.serialize());

        // Security templates need to show the alarm state as opposed to a device name
        if (found.template === 'security') {
          return [{ name: _.startCase(found.context[deviceAddresses[0]]['alarm-state'].toLowerCase()) }];
        }

        return _.filter(AppState().attr('devices'), (d) => {
          return _.includes(deviceAddresses, d.attr('base:address'));
        }).sort(d => d.attr('dev:name'))
          .map(d => ({ name: d.attr('dev:name') }));
      },
      expandPanel() {
        this.attr('panelExpanded', true);
      },
    });
  </script>
</can-component>